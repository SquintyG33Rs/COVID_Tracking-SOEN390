// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;

public class PatientUserTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    System.setProperty("webdriver.chrome.driver", "C:\\Users\\Squinty\\Documents\\GitHub\\COVID_Tracking-SOEN390\\TEST\\driver\\chromedriver.exe");
    driver = new ChromeDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void patientUser() {
    driver.get("http://localhost:8100/welcome-page");
    driver.manage().window().setSize(new Dimension(1944, 1210));
    {
      WebDriverWait wait = new WebDriverWait(driver, 30);
      wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector(".img-container > img")));
    }
    driver.findElement(By.cssSelector(".main-button")).click();
    {
      WebDriverWait wait = new WebDriverWait(driver, 30);
      wait.until(ExpectedConditions.elementToBeClickable(By.name("ion-input-0")));
    }
    driver.findElement(By.name("ion-input-0")).sendKeys("simon");
    driver.findElement(By.name("ion-input-1")).sendKeys("patient");
    driver.findElement(By.cssSelector(".button-round")).click();
    {
      WebDriverWait wait = new WebDriverWait(driver, 30);
      wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector(".text_lbl")));
    }
    {
      List<WebElement> elements = driver.findElements(By.cssSelector(".md:nth-child(1) > #col_div > .sc-ion-label-md-h"));
      assert(elements.size() > 0);
    }
    {
      List<WebElement> elements = driver.findElements(By.cssSelector(".md:nth-child(2) > #col_div > .sc-ion-label-md-h"));
      assert(elements.size() > 0);
    }
    {
      List<WebElement> elements = driver.findElements(By.cssSelector(".md:nth-child(3) .sc-ion-label-md-h"));
      assert(elements.size() > 0);
    }
    {
      List<WebElement> elements = driver.findElements(By.cssSelector(".md:nth-child(4) .sc-ion-label-md-h"));
      assert(elements.size() > 0);
    }
    {
      List<WebElement> elements = driver.findElements(By.cssSelector(".md:nth-child(5) .sc-ion-label-md-h"));
      assert(elements.size() > 0);
    }
    {
      List<WebElement> elements = driver.findElements(By.cssSelector(".md:nth-child(6) .sc-ion-label-md-h"));
      assert(elements.size() > 0);
    }
    driver.findElement(By.id("col_div")).click();
    {
      List<WebElement> elements = driver.findElements(By.cssSelector(".ion-text-center"));
      assert(elements.size() > 0);
    }
    {
      WebDriverWait wait = new WebDriverWait(driver, 30);
      wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector(".item-label:nth-child(1)")));
    }
    {
      List<WebElement> elements = driver.findElements(By.cssSelector(".item:nth-child(1) > .sc-ion-label-md-h"));
      assert(elements.size() > 0);
    }
    {
      List<WebElement> elements = driver.findElements(By.cssSelector(".item:nth-child(2) > .sc-ion-label-md-h"));
      assert(elements.size() > 0);
    }
    {
      List<WebElement> elements = driver.findElements(By.cssSelector(".item:nth-child(3) > .sc-ion-label-md-h"));
      assert(elements.size() > 0);
    }
    driver.findElement(By.cssSelector(".back-button-has-icon-only")).click();
    {
      WebDriverWait wait = new WebDriverWait(driver, 30);
      wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector(".text_lbl")));
    }
    driver.findElement(By.cssSelector(".md:nth-child(2) > #col_div > img")).click();
    {
      List<WebElement> elements = driver.findElements(By.cssSelector(".ion-text-center"));
      assert(elements.size() > 0);
    }
    {
      List<WebElement> elements = driver.findElements(By.name("ion-input-0"));
      assert(elements.size() > 0);
    }
    {
      List<WebElement> elements = driver.findElements(By.name("ion-input-0"));
      assert(elements.size() > 0);
    }
    {
      List<WebElement> elements = driver.findElements(By.name("ion-input-0"));
      assert(elements.size() > 0);
    }
    {
      List<WebElement> elements = driver.findElements(By.cssSelector(".ion-untouched:nth-child(4) > .ng-untouched"));
      assert(elements.size() > 0);
    }
    driver.findElement(By.cssSelector(".back-button-has-icon-only")).click();
    {
      WebDriverWait wait = new WebDriverWait(driver, 30);
      wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector(".text_lbl")));
    }
    driver.findElement(By.cssSelector(".md:nth-child(3) > #col_div")).click();
    {
      List<WebElement> elements = driver.findElements(By.cssSelector(".title-default:nth-child(2)"));
      assert(elements.size() > 0);
    }
    {
      List<WebElement> elements = driver.findElements(By.cssSelector(".button"));
      assert(elements.size() > 0);
    }
    driver.findElement(By.cssSelector(".back-button-has-icon-only")).click();
    driver.findElement(By.cssSelector(".md:nth-child(4) img")).click();
    {
      List<WebElement> elements = driver.findElements(By.cssSelector(".ion-text-center > .ion-inherit-color"));
      assert(elements.size() > 0);
    }
    driver.findElement(By.cssSelector(".back-button-has-icon-only")).click();
    driver.findElement(By.cssSelector(".md:nth-child(5) > #col_div")).click();
    {
      List<WebElement> elements = driver.findElements(By.cssSelector(".ion-inherit-color > .ion-inherit-color"));
      assert(elements.size() > 0);
    }
    {
      WebElement element = driver.findElement(By.name("ion-input-14"));
      Boolean isEditable = element.isEnabled() && element.getAttribute("readonly") == null;
      assertTrue(isEditable);
    }
    {
      WebElement element = driver.findElement(By.name("ion-input-15"));
      Boolean isEditable = element.isEnabled() && element.getAttribute("readonly") == null;
      assertTrue(isEditable);
    }
    {
      WebElement element = driver.findElement(By.name("ion-input-16"));
      Boolean isEditable = element.isEnabled() && element.getAttribute("readonly") == null;
      assertTrue(isEditable);
    }
    {
      WebElement element = driver.findElement(By.name("ion-input-17"));
      Boolean isEditable = element.isEnabled() && element.getAttribute("readonly") == null;
      assertTrue(isEditable);
    }
    {
      WebElement element = driver.findElement(By.name("ion-input-18"));
      Boolean isEditable = element.isEnabled() && element.getAttribute("readonly") == null;
      assertTrue(isEditable);
    }
    driver.findElement(By.cssSelector(".back-button-has-icon-only")).click();
    driver.findElement(By.cssSelector(".md:nth-child(6) img")).click();
    {
      WebDriverWait wait = new WebDriverWait(driver, 30);
      wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("alert-1-hdr")));
    }
    {
      List<WebElement> elements = driver.findElements(By.cssSelector("#alert-2-msg > img"));
      assert(elements.size() > 0);
    }
    driver.findElement(By.cssSelector(".alert-button-inner")).click();
  }
}
